rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ===== 共通ヘルパ ===== */
    function isSignedIn() {
      return request.auth != null;
    }

    function userDoc() {
      return isSignedIn()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid))
        : null;
    }

    function userCompany() {
      return isSignedIn()
        && userDoc() != null
        && userDoc().data.company != null
        ? userDoc().data.company
        : null;
    }

    function sameCompany(company) {
      return isSignedIn() && company == userCompany();
    }

    function isAdmin() {
      // users/{uid}.role に 'admin' を含めば管理者（(?i) で大小無視）
      return isSignedIn()
        && userDoc() != null
        && (userDoc().data.role is string)
        && userDoc().data.role.matches('(?i).*admin.*');
    }

    /* ===== users =====
       - 読み: 同一会社のログインユーザー
       - 作成/削除: 管理者
       - 更新: 管理者 or 本人（同一会社）
    */
    match /users/{uid} {
      allow read: if isSignedIn() && sameCompany(resource.data.company);

      allow create: if isAdmin();

      allow update: if isAdmin()
                    || (isSignedIn()
                        && uid == request.auth.uid
                        && sameCompany(resource.data.company));

      allow delete: if isAdmin();
    }

    /* ===== chats（グループ/DM） =====
       - 作成: 自分が members に含まれ、company が自社
       - 読み/更新: メンバーかつ自社
       - 削除: ownerId = 自分 かつ自社
    */
    match /chats/{chatId} {
      allow create: if isSignedIn()
                    && request.resource.data.members != null
                    && request.auth.uid in request.resource.data.members
                    && sameCompany(request.resource.data.company);

      allow read: if isSignedIn()
                  && resource.data.members != null
                  && request.auth.uid in resource.data.members
                  && sameCompany(resource.data.company);

      allow update: if isSignedIn()
                    && resource.data.members != null
                    && request.auth.uid in resource.data.members
                    && sameCompany(resource.data.company);

      allow delete: if isSignedIn()
                    && resource.data.ownerId == request.auth.uid
                    && sameCompany(resource.data.company);
    }

    /* ===== chats/{chatId}/messages =====
       - 読み: 親チャットのメンバー
       - 作成: 親チャットのメンバー & sender=自分
       - 更新/削除: 送信者本人
    */
    match /chats/{chatId}/messages/{messageId} {
      function parentChat() {
        return get(/databases/$(database)/documents/chats/$(chatId));
      }

      function isParentMember() {
        return isSignedIn()
               && request.auth.uid in parentChat().data.members
               && sameCompany(parentChat().data.company);
      }

      allow read: if isParentMember();

      allow create: if isParentMember()
                    && request.resource.data.sender == request.auth.uid;

      allow update, delete: if isParentMember()
                            && resource.data.sender == request.auth.uid;
    }

    /* ===== companies/{company}/complianceSettings/global =====
       - 読み: 同一会社のログインユーザー
       - 書き: 同一会社の管理者
    */
    match /companies/{companyId}/complianceSettings/{docId} {
      allow read: if isSignedIn() && sameCompany(companyId);
      allow create, update, delete: if isAdmin() && sameCompany(companyId);
    }

    /* ===== 既定は拒否 ===== */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
