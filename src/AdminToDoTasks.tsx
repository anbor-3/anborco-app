import { useEffect, useMemo, useState, useCallback } from 'react';
import { CheckCircle, Clock4, RotateCw, Trash2, Plus, ShieldCheck } from 'lucide-react';
import { auth, db } from './firebaseClient';
import { collection, addDoc, doc, onSnapshot, orderBy, query, serverTimestamp,
  updateDoc, deleteDoc, getDoc } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';

/* ===================== Types ===================== */
type NewsItem = { title: string; link: string; source: string; isoDate: string };
type Task = {
  id?: string;                 // Firestore doc id
  label: string;
  done: boolean;
  lawTag?: string;
  owner?: string;
  due?: string;                // YYYY-MM-DD
  note?: string;
  createdAt?: any;
};

/* ===================== News helpers ===================== */
const NEWS_CACHE_KEY = 'compliance_news_cache_v1';
const VISIBLE_DEFAULT = 5;
const LOAD_MORE_STEP = 10;

function readNewsCache(): NewsItem[] {
  try {
    const raw = localStorage.getItem(NEWS_CACHE_KEY);
    if (!raw) return [];
    const { items } = JSON.parse(raw) as { items: NewsItem[]; savedAt: number };
    return Array.isArray(items) ? items : [];
  } catch {
    return [];
  }
}
function writeNewsCache(items: NewsItem[]) {
  try {
    localStorage.setItem(
      NEWS_CACHE_KEY,
      JSON.stringify({ items, savedAt: Date.now() })
    );
  } catch {}
}

export default function AdminToDoTasks() {
  /* ===================== Ë™çË®º„Éª‰ºöÁ§æ„ÉªÊ®©Èôê ===================== */
  const [uid, setUid] = useState<string>('');
  const [company, setCompany] = useState<string>('default');
  const [isAdmin, setIsAdmin] = useState<boolean>(false);

  useEffect(() => {
    const unsub = onAuthStateChanged(auth, async (u) => {
      if (!u) return;
      setUid(u.uid);
      // Ëá™ÂàÜ„ÅÆ„É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´„Åã„Çâ company „Å® role „ÇíÂèñÂæó
      const meSnap = await getDoc(doc(db, 'users', u.uid));
      const me = meSnap.exists() ? (meSnap.data() as any) : {};
      const co = me?.company || localStorage.getItem('company') || 'default';
      setCompany(co);
      setIsAdmin(String(me?.role || '').toLowerCase().includes('admin'));
    });
    return () => unsub();
  }, []);

  /* ===================== „Éã„É•„Éº„Çπ ===================== */
  const [allNews, setAllNews] = useState<NewsItem[]>([]);
  const [visible, setVisible] = useState<number>(VISIBLE_DEFAULT);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  const tzDate = (iso: string) =>
    new Date(iso).toLocaleString('ja-JP', {
      timeZone: 'Asia/Tokyo',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    });

  const normalizeAndSort = (items: any[]): NewsItem[] => {
    const mapped = (items || []).map((n: any) => ({
      title: String(n?.title || '').trim(),
      link: String(n?.link || '').trim(),
      source: String(n?.source || 'RSS'),
      isoDate: n?.isoDate || n?.pubDate || new Date().toISOString(),
    }));
    mapped.sort((a, b) => new Date(b.isoDate).getTime() - new Date(a.isoDate).getTime());
    return mapped;
  };

  const fetchFromApi = async () => {
    const sources = [
   'https://www.mlit.go.jp/road/ir/ir-data/rss.xml',        // ÂõΩ‰∫§ÁúÅ ÈÅìË∑ØÈñ¢ÈÄ£
   'https://www.meti.go.jp/english/rss/index.xml',          // ÁµåÁî£ÁúÅ Ëã±Ë™ûRSS
 ];
 // rss2json ÁµåÁî±„ÅßCORSÂõûÈÅøÔºà‚Äª„É¨„Éº„ÉàÂà∂Èôê„Å´Ê≥®ÊÑèÔºâ
 const calls = sources.map(u =>
   fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(u)}`, { cache: 'no-store' })
     .then(res => res.ok ? res.json() : Promise.reject(res.status))
     .then(j => (j.items || []).map((it:any) => ({
       title: it.title,
       link: it.link,
       source: j?.feed?.title || 'RSS',
       isoDate: it.pubDate || it.isoDate || new Date().toISOString(),
     })))
 );
 const settled = await Promise.allSettled(calls);
 const merged = settled.flatMap(s => s.status === 'fulfilled' ? s.value : []);
 if (!merged.length) throw new Error('rss2json failed');
 const mergedSorted = merged.sort(
  (a, b) => new Date(b.isoDate).getTime() - new Date(a.isoDate).getTime()
);
return normalizeAndSort(mergedSorted);
  };

  const fetchFallback = async () => {
    const FEEDS = [
      'https://www.mlit.go.jp/road/ir/ir-data/rss.xml',
      'https://www.meti.go.jp/english/rss/index.xml',
    ];
    const calls = FEEDS.map(async (url) => {
      const res = await fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(url)}`);
      if (!res.ok) throw new Error('rss2json failed');
      const j = await res.json();
      const siteTitle = j?.feed?.title || 'RSS';
      return (j?.items || []).map((it: any) => ({
        title: it.title,
        link: it.link,
        source: siteTitle,
        isoDate: it.pubDate || it.isoDate || new Date().toISOString(),
      })) as NewsItem[];
    });
    const results = await Promise.allSettled(calls);
    const merged: NewsItem[] = [];
    results.forEach((p) => {
      if (p.status === 'fulfilled') merged.push(...p.value);
    });
    return normalizeAndSort(merged);
  };

  const loadNews = useCallback(async () => {
    setVisible(VISIBLE_DEFAULT);
    setLoading(true);
    setErr(null);
    try {
      // 1) API
      const items = await fetchFromApi();
      if (items.length > 0) {
        setAllNews(items);
        writeNewsCache(items);
        return;
      }
      // 2) API„ÅåÁ©∫„Å™„Çâ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      const fb = await fetchFallback();
      if (fb.length > 0) {
        setAllNews(fb);
        writeNewsCache(fb);
        return;
      }
      // 3) „Å©„Å°„Çâ„ÇÇÁ©∫ ‚Üí ÊúÄÂæå„Å´„Ç≠„É£„ÉÉ„Ç∑„É•
      const cache = readNewsCache();
      setAllNews(cache);
      if (cache.length === 0) setErr('„Éã„É•„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
    } catch (e) {
      console.error('[news] failed', e);
      // Â§±ÊïóÊôÇ„ÅØ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíË°®Á§∫Ôºà‚ÄúÂ∏∏„Å´5‰ª∂‚Äù„ÇíÊãÖ‰øùÔºâ
      const cache = readNewsCache();
      setAllNews(cache);
      if (cache.length === 0) setErr('„Éã„É•„Éº„ÇπÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  }, []);

  // ÂàùÂõûÔºö„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂç≥Ë°®Á§∫‚ÜíÈùûÂêåÊúü„ÅßÊúÄÊñ∞ÂèñÂæó
  useEffect(() => {
    const cache = readNewsCache();
    if (cache.length > 0) setAllNews(cache);
    setVisible(VISIBLE_DEFAULT);
    loadNews();
  }, [loadNews]);

  /* ===================== „Çø„Çπ„ÇØÔºàFirestore„Éª‰ºöÁ§æÂà•Ôºâ ===================== */
  const [tasks, setTasks] = useState<Task[]>([]);

  // „ÉÜ„É≥„Éó„É¨
  const TEMPLATE: Task[] = [
    { label: 'ÈõªÂ≠êÂ∏≥Á∞ø‰øùÂ≠òÊ≥ïÔºö„Çπ„Ç≠„É£„Éä‰øùÂ≠ò„ÉªÊ§úÁ¥¢Ë¶Å‰ª∂„ÅÆÂÆöÁùÄ', done: true,  lawTag: 'ÈõªÂ∏≥Ê≥ï',         owner: 'ÁÆ°ÁêÜÈÉ®', note: 'Ê§úÁ¥¢Ë¶Å‰ª∂Ôºà‚Ωá‰ªò„Éª‚æ¶È°ç„ÉªÂèñÂºïÂÖàÔºâ...' },
    { label: 'ÈÅãËª¢ËÄÖ„ÅÆÂä¥ÂÉçÊôÇÈñìÊîπÂñÑÔºàÁÇπÂëº„Éª‰ºëÊÅØ„ÉªÊãòÊùüÊôÇÈñì„ÅÆÈ†ÜÂÆàÔºâ', done: false, lawTag: 'Âä¥Âü∫Ê≥ï/ÊîπÂñÑÂü∫Ê∫ñ', owner: 'ÈÅãË°åÁÆ°ÁêÜ', note: '„Ç¢„É´„Ç≥„Éº„É´Ê§úÁü•Ë®òÈå≤„ÅÆ‰øùÂ≠ò...' },
    { label: 'ÂÆâÂÖ®ÁÆ°ÁêÜËÄÖ„ÅÆÈÅ∏‰ªª„ÉªÂ±äÂá∫„ÉªË¨õÁøíÂèóË¨õ',                 done: false, lawTag: 'ÈÅìË∑ØÈÅãÈÄÅÊ≥ï',     owner: 'Á∑èÂãô' },
    { label: 'ÁÇπÂëºË®òÈå≤„ÉªÈÅãËª¢Êó•Â†±„Éª‰∫ãÊïÖË®òÈå≤„ÅÆ‰øùÂ≠òÊúüÈñìÊï¥ÂÇô',       done: false, lawTag: 'ÈÅãÈÄÅÊ≥ï/ÂÆâÂÖ®Ë¶èÂâá', owner: 'ÈÅãË°åÁÆ°ÁêÜ', note: 'Êó•Â†±1Âπ¥„ÄÅ‰∫ãÊïÖ3Âπ¥ „Å™„Å©' },
    { label: 'ÁáÉÊñôÁ®é/Ë£úÂä©Âà∂Â∫¶„ÅÆÈÅ©Áî®„ÉÅ„Çß„ÉÉ„ÇØ',                     done: false, lawTag: 'ÁßüÁâπ/„Ç®„ÉçÊîøÁ≠ñ',   owner: 'ÁµåÁêÜ' },
  ];

  // Ë≥ºË™≠
  useEffect(() => {
    if (!company) return;
    const qCol = query(
      collection(db, 'companies', company, 'complianceTasks'),
      orderBy('createdAt', 'asc')
    );
    const unsub = onSnapshot(qCol, (snap) => {
      const list = snap.docs.map(d => ({ id: d.id, ...(d.data() as any) })) as Task[];
      setTasks(list);
    });
    return () => unsub();
  }, [company]);

  // ËøΩÂä†
  const addTask = async (t: Omit<Task, 'id' | 'createdAt'>) => {
    await addDoc(collection(db, 'companies', company, 'complianceTasks'), {
      ...t,
      createdAt: serverTimestamp(),
    });
  };

  // ÂâäÈô§ÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ
  const removeTask = async (id?: string) => {
    if (!id) return;
    await deleteDoc(doc(db, 'companies', company, 'complianceTasks', id));
  };

  // ÂÆå‰∫Ü„Éà„Ç∞„É´ÔºàÂÖ®Âì°ÂèØÔºâ
  const toggleTask = async (t: Task) => {
    if (!t.id) return;
    await updateDoc(doc(db, 'companies', company, 'complianceTasks', t.id), {
      done: !t.done,
    });
  };

  // „ÉÜ„É≥„Éó„É¨ÊäïÂÖ•ÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ
  const loadTemplate = async () => {
    if (!isAdmin) return;
    if (!confirm('ÁèæÂú®„ÅÆ„Çø„Çπ„ÇØ„Å´„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíËøΩÂä†„Åó„Åæ„Åô„ÄÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü')) return;
    for (const t of TEMPLATE) await addTask(t);
  };

  // ‰∏ÄÊã¨ÂâäÈô§ÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ
  const clearAll = async () => {
    if (!isAdmin) return;
    if (!confirm('ÂÖ®„Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åô„ÄÇÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü')) return;
    const delAll = tasks.map(t => t.id && deleteDoc(doc(db, 'companies', company, 'complianceTasks', t.id)));
    await Promise.all(delAll);
  };

  // ËøΩÂä†„Éï„Ç©„Éº„É†
  const [form, setForm] = useState<Omit<Task, 'id' | 'createdAt'>>({
    label: '', done: false, lawTag: '', owner: '', due: '', note: ''
  });

  const doneRate = useMemo(() => {
    const total = tasks.length;
    const done = tasks.filter(t => t.done).length;
    return total ? Math.round((done / total) * 100) : 0;
  }, [tasks]);

  /* ===================== UI ===================== */
  return (
    <div className="p-6 space-y-8">
      {/* „Çø„Ç§„Éà„É´ */}
      <h1 className="text-3xl font-bold mb-4 flex items-center gap-2">
        üìö Ê≥ïÊîπÊ≠£„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ <span className="text-base text-gray-500">/ Law Compliance Dashboard</span>
      </h1>

      {/* üì∞ ÊúÄÊñ∞„Éã„É•„Éº„Çπ */}
      <section className="bg-white rounded-xl shadow p-5">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold mb-3">üì∞ ÊúÄÊñ∞„Éã„É•„Éº„ÇπÔºàÁáÉÊñô„ÉªÈÅãÈÄÅ„ÅÆÊ≥ï‰ª§Á≠âÔºâ</h2>
          <div className="flex items-center gap-2">
            <span className="text-xs text-gray-500">{allNews.length}‰ª∂</span>
            <button
              onClick={loadNews}
              className="inline-flex items-center gap-1 px-3 py-1 rounded bg-gray-100 hover:bg-gray-200 text-sm"
              title="ÊâãÂãïÊõ¥Êñ∞"
            >
              <RotateCw size={16} /> Êõ¥Êñ∞
            </button>
          </div>
        </div>

        {loading && <p className="text-gray-500">Ë™≠„ÅøËæº„Åø‰∏≠‚Ä¶</p>}
        {err && <p className="text-red-600">{err}</p>}

        {/* Â∏∏„Å´ÊúÄÊñ∞5‰ª∂ÔºàÔºãÊã°ÂºµÔºâ */}
        <ul className="divide-y">
          {(allNews.slice(0, Math.max(visible, VISIBLE_DEFAULT))).map((n, i) => (
            <li key={`${n.link}-${i}`} className="py-3">
              <a className="text-blue-700 underline font-medium" href={n.link} target="_blank" rel="noopener noreferrer">
                {n.title}
              </a>
              <div className="text-xs text-gray-500 mt-1">
                {n.source} „Éª {tzDate(n.isoDate)}
              </div>
            </li>
          ))}
          {allNews.length === 0 && !loading && (
            <li className="py-3 text-gray-500">Ôºà„Ç≠„É£„ÉÉ„Ç∑„É•„Åå„Å™„ÅÑ„Åü„ÇÅÂàùÂõû„ÅØÁ©∫„ÅÆÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ‰∏ä„ÅÆ„ÄåÊõ¥Êñ∞„Äç„ÇíÊäº„Åô„Å®ÂèñÂæó„ÇíÂÜçË©¶Ë°å„Åó„Åæ„ÅôÔºâ</li>
          )}
        </ul>

        {/* Êìç‰Ωú */}
        <div className="mt-3 flex flex-wrap gap-2">
          {Math.max(visible, VISIBLE_DEFAULT) < allNews.length && (
            <button
              onClick={() => setVisible(v => v + LOAD_MORE_STEP)}
              className="px-3 py-1.5 text-sm rounded bg-gray-100 hover:bg-gray-200"
            >
              „ÇÇ„Å£„Å®Ë¶ã„ÇãÔºà+{LOAD_MORE_STEP}‰ª∂Ôºâ
            </button>
          )}
          {allNews.length > 0 && Math.max(visible, VISIBLE_DEFAULT) < allNews.length && (
            <button
              onClick={() => setVisible(9999)}
              className="px-3 py-1.5 text-sm rounded bg-gray-100 hover:bg-gray-200"
            >
              „Åô„Åπ„Å¶Ë°®Á§∫Ôºà{allNews.length}‰ª∂Ôºâ
            </button>
          )}
          {allNews.length > VISIBLE_DEFAULT && (
            <button
              onClick={() => setVisible(VISIBLE_DEFAULT)}
              className="px-3 py-1.5 text-sm rounded bg-gray-100 hover:bg-gray-200"
            >
              ÊúÄÊñ∞5‰ª∂„ÅÆ„Åø
            </button>
          )}
        </div>

        <p className="text-xs text-gray-500 mt-3">
          ‚Äª Ë¶ãÂá∫„Åó„Éª„É™„É≥„ÇØ„ÉªÊó•‰ªò„ÅÆ„ÅøË°®Á§∫ÔºàÊú¨ÊñáËª¢Ëºâ„Å™„ÅóÔºâ„ÄÇÊÉÖÂ†±Ê∫ê„ÅØÂõΩ‰∫§ÁúÅ„ÉªÁµåÁî£ÁúÅ„Å™„Å©„ÅÆÂÖ¨ÂºèRSS„ÄÇÂ§±ÊïóÊôÇ„ÅØÂâçÂõû„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ
        </p>
      </section>

      {/* üìã ÂØæÂøú„Çø„Çπ„ÇØ„É™„Çπ„Éà */}
      <section className="bg-white rounded-xl shadow p-5">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-semibold">üìã ÂØæÂøú„Çø„Çπ„ÇØ„É™„Çπ„Éà / Compliance Tasks</h2>
          <div className="text-sm text-gray-500">ÈÅîÊàêÁéá: {doneRate}%</div>
        </div>

        {/* ÁÆ°ÁêÜËÄÖÊìç‰Ωú */}
        <div className="flex flex-wrap items-center gap-2 mb-3">
          {isAdmin && (
            <>
              <span className="inline-flex items-center text-emerald-700 text-sm font-medium">
                <ShieldCheck size={16} className="mr-1" /> ÁÆ°ÁêÜËÄÖ„É¢„Éº„Éâ
              </span>
              <button
                onClick={loadTemplate}
                className="px-3 py-1.5 rounded bg-emerald-600 text-white hover:bg-emerald-700 text-sm"
              >
                „ÉÜ„É≥„Éó„É¨Ë™≠Ëæº
              </button>
              <button
                onClick={clearAll}
                className="px-3 py-1.5 rounded bg-red-600 text-white hover:bg-red-700 text-sm"
              >
                ÂÖ®ÂâäÈô§
              </button>
            </>
          )}
        </div>

        {/* ËøΩÂä†„Éï„Ç©„Éº„É†ÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ */}
        {isAdmin && (
          <div className="mb-4 grid grid-cols-1 md:grid-cols-6 gap-2">
            <input
              className="border rounded px-3 py-2 md:col-span-2"
              placeholder="„Çø„Çπ„ÇØÂêçÔºàÂøÖÈ†àÔºâ"
              value={form.label}
              onChange={e => setForm(f => ({ ...f, label: e.target.value }))}
            />
            <input
              className="border rounded px-3 py-2"
              placeholder="Ê≥ï‰ª§„Çø„Ç∞ ‰æã: ÈõªÂ∏≥Ê≥ï"
              value={form.lawTag || ''}
              onChange={e => setForm(f => ({ ...f, lawTag: e.target.value }))}
            />
            <input
              className="border rounded px-3 py-2"
              placeholder="ÊãÖÂΩì ‰æã: ÁÆ°ÁêÜÈÉ®"
              value={form.owner || ''}
              onChange={e => setForm(f => ({ ...f, owner: e.target.value }))}
            />
            <input
              className="border rounded px-3 py-2"
              placeholder="ÊúüÈôê YYYY-MM-DD"
              value={form.due || ''}
              onChange={e => setForm(f => ({ ...f, due: e.target.value }))}
            />
            <div className="flex gap-2">
              <button
                onClick={() => {
                  if (!form.label.trim()) return alert('„Çø„Çπ„ÇØÂêç„ÅØÂøÖÈ†à„Åß„Åô');
                  addTask({ ...form, done: false });
                  setForm({ label: '', done: false, lawTag: '', owner: '', due: '', note: '' });
                }}
                className="flex-1 inline-flex items-center justify-center gap-1 px-3 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
              >
                <Plus size={16} /> ËøΩÂä†
              </button>
            </div>
            <textarea
              className="border rounded px-3 py-2 md:col-span-6"
              placeholder="„É°„É¢Ôºà‰ªªÊÑèÔºâ"
              value={form.note || ''}
              onChange={e => setForm(f => ({ ...f, note: e.target.value }))}
              rows={2}
            />
          </div>
        )}

        {/* „Çø„Çπ„ÇØ„É™„Çπ„Éà */}
        <ul className="space-y-3">
          {tasks.map((t) => (
            <li key={t.id} className="flex items-start gap-3">
              <button onClick={() => toggleTask(t)} aria-label="toggle" className="mt-0.5">
                {t.done ? <CheckCircle className="text-green-500" size={20} /> : <Clock4 className="text-yellow-500" size={20} />}
              </button>
              <div className="flex-1">
                <label className="inline-flex items-center">
                  <input type="checkbox" className="mr-2" checked={t.done} onChange={() => toggleTask(t)} />
                  <span className={t.done ? 'line-through text-gray-500' : ''}>{t.label}</span>
                </label>
                <div className="text-xs text-gray-500 mt-0.5 space-x-2">
                  {t.lawTag && <span>#{t.lawTag}</span>}
                  {t.owner && <span>ÊãÖÂΩì: {t.owner}</span>}
                  {t.due && <span>ÊúüÈôê: {t.due}</span>}
                </div>
                {t.note && <div className="text-xs text-gray-500 mt-1">{t.note}</div>}
              </div>

              {/* ÂâäÈô§ÔºàÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ */}
              {isAdmin && (
                <button
                  onClick={() => removeTask(t.id)}
                  className="text-red-600 hover:text-red-800 mt-0.5"
                  title="„Çø„Çπ„ÇØ„ÇíÂâäÈô§"
                >
                  <Trash2 size={18} />
                </button>
              )}
            </li>
          ))}
          {tasks.length === 0 && (
            <li className="text-gray-500">„Çø„Çπ„ÇØ„ÅØ„Åæ„Å†„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</li>
          )}
        </ul>
      </section>

      {/* üìÇ ‰øùÂ≠òÊúüÈñì„Ç¨„Ç§„Éâ */}
      <section className="bg-white rounded-xl shadow p-5">
        <h2 className="text-xl font-semibold mb-3">üìÇ ‰øùÂ≠òË®òÈå≤„Ç¨„Ç§„Éâ / Record Retention Guide</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full table-auto border border-gray-300">
            <thead>
              <tr className="bg-gray-100">
                <th className="px-4 py-2 border text-left">Êõ∏È°ûÂêç / Document</th>
                <th className="px-4 py-2 border text-left">‰øùÂ≠òÊúüÈñì / Retention</th>
                <th className="px-4 py-2 border text-left">Èñ¢ÈÄ£Ê≥ï‰ª§ / Related Law</th>
              </tr>
            </thead>
            <tbody>
              {[
                { name: 'Ë´ãÊ±ÇÊõ∏„ÉªÈ†òÂèéÊõ∏ / Invoices & Receipts', period: '7Âπ¥ / 7 years', law: 'ÈõªÂ≠êÂ∏≥Á∞ø‰øùÂ≠òÊ≥ï' },
                { name: 'Â•ëÁ¥ÑÊõ∏„ÉªË¶ãÁ©çÊõ∏ / Contracts & Estimates', period: '7Âπ¥ / 7 years', law: 'Ê≥ï‰∫∫Á®éÊ≥ï ‰ªñ' },
                { name: 'Ë≥ÉÈáëÂè∞Â∏≥„ÉªÂá∫Âã§Á∞ø / Wage & Attendance Books', period: '3Âπ¥ / 3 years', law: 'Âä¥ÂÉçÂü∫Ê∫ñÊ≥ï' },
                { name: 'Âä¥ÂÉçËÄÖÂêçÁ∞ø / Employee Registry', period: '3Âπ¥ / 3 years', law: 'Âä¥ÂÉçÂü∫Ê∫ñÊ≥ï' },
                { name: 'ÁÇπÂëºË®òÈå≤„ÉªÈÅãËª¢Êó•Â†± / Driving Logs & Check Records', period: '1Âπ¥ / 1 year', law: 'ÈÅãÈÄÅÊ≥ï„ÉªÂÆâÂÖ®Ë¶èÂâá' },
                { name: '‰∫ãÊïÖË®òÈå≤ / Accident Records', period: '3Âπ¥ / 3 years', law: 'ÈÅãÈÄÅÊ≥ï' },
              ].map((doc, idx) => (
                <tr key={idx} className="hover:bg-gray-50">
                  <td className="px-4 py-2 border">{doc.name}</td>
                  <td className="px-4 py-2 border">{doc.period}</td>
                  <td className="px-4 py-2 border">{doc.law}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </div>
  );
}
